// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cart: (where?: CartWhereInput) => Promise<boolean>;
  cartItem: (where?: CartItemWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderItem: (where?: OrderItemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cart: (where: CartWhereUniqueInput) => CartNullablePromise;
  carts: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cart>;
  cartsConnection: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartConnectionPromise;
  cartItems: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CartItem>;
  cartItemsConnection: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartItemConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  orderItems: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderItem>;
  orderItemsConnection: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderItemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (args: {
    data: CartUpdateInput;
    where: CartWhereUniqueInput;
  }) => CartPromise;
  updateManyCarts: (args: {
    data: CartUpdateManyMutationInput;
    where?: CartWhereInput;
  }) => BatchPayloadPromise;
  upsertCart: (args: {
    where: CartWhereUniqueInput;
    create: CartCreateInput;
    update: CartUpdateInput;
  }) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createCartItem: (data: CartItemCreateInput) => CartItemPromise;
  updateManyCartItems: (args: {
    data: CartItemUpdateManyMutationInput;
    where?: CartItemWhereInput;
  }) => BatchPayloadPromise;
  deleteManyCartItems: (where?: CartItemWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderItem: (data: OrderItemCreateInput) => OrderItemPromise;
  updateManyOrderItems: (args: {
    data: OrderItemUpdateManyMutationInput;
    where?: OrderItemWhereInput;
  }) => BatchPayloadPromise;
  deleteManyOrderItems: (where?: OrderItemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  cartItem: (
    where?: CartItemSubscriptionWhereInput
  ) => CartItemSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderItem: (
    where?: OrderItemSubscriptionWhereInput
  ) => OrderItemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sessionId_ASC"
  | "sessionId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CartItemOrderByInput = "quantity_ASC" | "quantity_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "category_ASC"
  | "category_DESC"
  | "description_ASC"
  | "description_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC";

export type OrderItemOrderByInput = "quantity_ASC" | "quantity_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stripeCharge_ASC"
  | "stripeCharge_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "currentLat_ASC"
  | "currentLat_DESC"
  | "currentLon_ASC"
  | "currentLon_DESC"
  | "destinationLat_ASC"
  | "destinationLat_DESC"
  | "destinationLon_ASC"
  | "destinationLon_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "verifiedAt_ASC"
  | "verifiedAt_DESC"
  | "capturedAt_ASC"
  | "capturedAt_DESC"
  | "cookedAt_ASC"
  | "cookedAt_DESC"
  | "deliveredAt_ASC"
  | "deliveredAt_DESC"
  | "failedAt_ASC"
  | "failedAt_DESC"
  | "error_ASC"
  | "error_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "hashPassword_ASC"
  | "hashPassword_DESC"
  | "name_ASC"
  | "name_DESC"
  | "points_ASC"
  | "points_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  sessionId?: Maybe<String>;
}>;

export interface CartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sessionId?: Maybe<String>;
  sessionId_not?: Maybe<String>;
  sessionId_in?: Maybe<String[] | String>;
  sessionId_not_in?: Maybe<String[] | String>;
  sessionId_lt?: Maybe<String>;
  sessionId_lte?: Maybe<String>;
  sessionId_gt?: Maybe<String>;
  sessionId_gte?: Maybe<String>;
  sessionId_contains?: Maybe<String>;
  sessionId_not_contains?: Maybe<String>;
  sessionId_starts_with?: Maybe<String>;
  sessionId_not_starts_with?: Maybe<String>;
  sessionId_ends_with?: Maybe<String>;
  sessionId_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  items_every?: Maybe<CartItemWhereInput>;
  items_some?: Maybe<CartItemWhereInput>;
  items_none?: Maybe<CartItemWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CartWhereInput[] | CartWhereInput>;
  OR?: Maybe<CartWhereInput[] | CartWhereInput>;
  NOT?: Maybe<CartWhereInput[] | CartWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  hashPassword?: Maybe<String>;
  hashPassword_not?: Maybe<String>;
  hashPassword_in?: Maybe<String[] | String>;
  hashPassword_not_in?: Maybe<String[] | String>;
  hashPassword_lt?: Maybe<String>;
  hashPassword_lte?: Maybe<String>;
  hashPassword_gt?: Maybe<String>;
  hashPassword_gte?: Maybe<String>;
  hashPassword_contains?: Maybe<String>;
  hashPassword_not_contains?: Maybe<String>;
  hashPassword_starts_with?: Maybe<String>;
  hashPassword_not_starts_with?: Maybe<String>;
  hashPassword_ends_with?: Maybe<String>;
  hashPassword_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  points?: Maybe<Int>;
  points_not?: Maybe<Int>;
  points_in?: Maybe<Int[] | Int>;
  points_not_in?: Maybe<Int[] | Int>;
  points_lt?: Maybe<Int>;
  points_lte?: Maybe<Int>;
  points_gt?: Maybe<Int>;
  points_gte?: Maybe<Int>;
  carts_every?: Maybe<CartWhereInput>;
  carts_some?: Maybe<CartWhereInput>;
  carts_none?: Maybe<CartWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CartItemWhereInput {
  cart?: Maybe<CartWhereInput>;
  item?: Maybe<ItemWhereInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  OR?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  NOT?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
}

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderItemWhereInput {
  order?: Maybe<OrderWhereInput>;
  item?: Maybe<ItemWhereInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  OR?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  NOT?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  currentLat?: Maybe<Float>;
  currentLat_not?: Maybe<Float>;
  currentLat_in?: Maybe<Float[] | Float>;
  currentLat_not_in?: Maybe<Float[] | Float>;
  currentLat_lt?: Maybe<Float>;
  currentLat_lte?: Maybe<Float>;
  currentLat_gt?: Maybe<Float>;
  currentLat_gte?: Maybe<Float>;
  currentLon?: Maybe<Float>;
  currentLon_not?: Maybe<Float>;
  currentLon_in?: Maybe<Float[] | Float>;
  currentLon_not_in?: Maybe<Float[] | Float>;
  currentLon_lt?: Maybe<Float>;
  currentLon_lte?: Maybe<Float>;
  currentLon_gt?: Maybe<Float>;
  currentLon_gte?: Maybe<Float>;
  destinationLat?: Maybe<Float>;
  destinationLat_not?: Maybe<Float>;
  destinationLat_in?: Maybe<Float[] | Float>;
  destinationLat_not_in?: Maybe<Float[] | Float>;
  destinationLat_lt?: Maybe<Float>;
  destinationLat_lte?: Maybe<Float>;
  destinationLat_gt?: Maybe<Float>;
  destinationLat_gte?: Maybe<Float>;
  destinationLon?: Maybe<Float>;
  destinationLon_not?: Maybe<Float>;
  destinationLon_in?: Maybe<Float[] | Float>;
  destinationLon_not_in?: Maybe<Float[] | Float>;
  destinationLon_lt?: Maybe<Float>;
  destinationLon_lte?: Maybe<Float>;
  destinationLon_gt?: Maybe<Float>;
  destinationLon_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  verifiedAt?: Maybe<DateTimeInput>;
  verifiedAt_not?: Maybe<DateTimeInput>;
  verifiedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  verifiedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  verifiedAt_lt?: Maybe<DateTimeInput>;
  verifiedAt_lte?: Maybe<DateTimeInput>;
  verifiedAt_gt?: Maybe<DateTimeInput>;
  verifiedAt_gte?: Maybe<DateTimeInput>;
  capturedAt?: Maybe<DateTimeInput>;
  capturedAt_not?: Maybe<DateTimeInput>;
  capturedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  capturedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  capturedAt_lt?: Maybe<DateTimeInput>;
  capturedAt_lte?: Maybe<DateTimeInput>;
  capturedAt_gt?: Maybe<DateTimeInput>;
  capturedAt_gte?: Maybe<DateTimeInput>;
  cookedAt?: Maybe<DateTimeInput>;
  cookedAt_not?: Maybe<DateTimeInput>;
  cookedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  cookedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  cookedAt_lt?: Maybe<DateTimeInput>;
  cookedAt_lte?: Maybe<DateTimeInput>;
  cookedAt_gt?: Maybe<DateTimeInput>;
  cookedAt_gte?: Maybe<DateTimeInput>;
  deliveredAt?: Maybe<DateTimeInput>;
  deliveredAt_not?: Maybe<DateTimeInput>;
  deliveredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveredAt_lt?: Maybe<DateTimeInput>;
  deliveredAt_lte?: Maybe<DateTimeInput>;
  deliveredAt_gt?: Maybe<DateTimeInput>;
  deliveredAt_gte?: Maybe<DateTimeInput>;
  failedAt?: Maybe<DateTimeInput>;
  failedAt_not?: Maybe<DateTimeInput>;
  failedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  failedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  failedAt_lt?: Maybe<DateTimeInput>;
  failedAt_lte?: Maybe<DateTimeInput>;
  failedAt_gt?: Maybe<DateTimeInput>;
  failedAt_gte?: Maybe<DateTimeInput>;
  items_every?: Maybe<OrderItemWhereInput>;
  items_some?: Maybe<OrderItemWhereInput>;
  items_none?: Maybe<OrderItemWhereInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CartCreateInput {
  sessionId: String;
  user: UserCreateOneWithoutCartsInput;
  items?: Maybe<CartItemCreateManyWithoutCartInput>;
}

export interface UserCreateOneWithoutCartsInput {
  create?: Maybe<UserCreateWithoutCartsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCartsInput {
  email: String;
  hashPassword: String;
  name: String;
  points?: Maybe<Int>;
}

export interface CartItemCreateManyWithoutCartInput {
  create?: Maybe<
    CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput
  >;
}

export interface CartItemCreateWithoutCartInput {
  item: ItemCreateOneInput;
  quantity: Int;
}

export interface ItemCreateOneInput {
  create?: Maybe<ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface ItemCreateInput {
  name: String;
  amount: Int;
  category: String;
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface CartUpdateInput {
  sessionId?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCartsInput>;
  items?: Maybe<CartItemUpdateManyWithoutCartInput>;
}

export interface UserUpdateOneRequiredWithoutCartsInput {
  create?: Maybe<UserCreateWithoutCartsInput>;
  update?: Maybe<UserUpdateWithoutCartsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCartsDataInput {
  email?: Maybe<String>;
  hashPassword?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
}

export interface UserUpsertWithoutCartsInput {
  update: UserUpdateWithoutCartsDataInput;
  create: UserCreateWithoutCartsInput;
}

export interface CartItemUpdateManyWithoutCartInput {
  create?: Maybe<
    CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput
  >;
  deleteMany?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  updateMany?: Maybe<
    | CartItemUpdateManyWithWhereNestedInput[]
    | CartItemUpdateManyWithWhereNestedInput
  >;
}

export interface CartItemScalarWhereInput {
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  OR?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  NOT?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
}

export interface CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput;
  data: CartItemUpdateManyDataInput;
}

export interface CartItemUpdateManyDataInput {
  quantity?: Maybe<Int>;
}

export interface CartUpdateManyMutationInput {
  sessionId?: Maybe<String>;
}

export interface CartItemCreateInput {
  cart: CartCreateOneWithoutItemsInput;
  item: ItemCreateOneInput;
  quantity: Int;
}

export interface CartCreateOneWithoutItemsInput {
  create?: Maybe<CartCreateWithoutItemsInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartCreateWithoutItemsInput {
  sessionId: String;
  user: UserCreateOneWithoutCartsInput;
}

export interface CartItemUpdateManyMutationInput {
  quantity?: Maybe<Int>;
}

export interface ItemUpdateInput {
  name?: Maybe<String>;
  amount?: Maybe<Int>;
  category?: Maybe<String>;
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface ItemUpdateManyMutationInput {
  name?: Maybe<String>;
  amount?: Maybe<Int>;
  category?: Maybe<String>;
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
}

export interface OrderCreateInput {
  user: UserCreateOneInput;
  stripeCharge: Json;
  amount: Int;
  currentLat?: Maybe<Float>;
  currentLon?: Maybe<Float>;
  destinationLat: Float;
  destinationLon: Float;
  verifiedAt?: Maybe<DateTimeInput>;
  capturedAt?: Maybe<DateTimeInput>;
  cookedAt?: Maybe<DateTimeInput>;
  deliveredAt?: Maybe<DateTimeInput>;
  failedAt?: Maybe<DateTimeInput>;
  error?: Maybe<Json>;
  items?: Maybe<OrderItemCreateManyWithoutOrderInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  email: String;
  hashPassword: String;
  name: String;
  points?: Maybe<Int>;
  carts?: Maybe<CartCreateManyWithoutUserInput>;
}

export interface CartCreateManyWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput[] | CartCreateWithoutUserInput>;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
}

export interface CartCreateWithoutUserInput {
  sessionId: String;
  items?: Maybe<CartItemCreateManyWithoutCartInput>;
}

export interface OrderItemCreateManyWithoutOrderInput {
  create?: Maybe<
    OrderItemCreateWithoutOrderInput[] | OrderItemCreateWithoutOrderInput
  >;
}

export interface OrderItemCreateWithoutOrderInput {
  item: ItemCreateOneInput;
  quantity: Int;
}

export interface OrderUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  stripeCharge?: Maybe<Json>;
  amount?: Maybe<Int>;
  currentLat?: Maybe<Float>;
  currentLon?: Maybe<Float>;
  destinationLat?: Maybe<Float>;
  destinationLon?: Maybe<Float>;
  verifiedAt?: Maybe<DateTimeInput>;
  capturedAt?: Maybe<DateTimeInput>;
  cookedAt?: Maybe<DateTimeInput>;
  deliveredAt?: Maybe<DateTimeInput>;
  failedAt?: Maybe<DateTimeInput>;
  error?: Maybe<Json>;
  items?: Maybe<OrderItemUpdateManyWithoutOrderInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  hashPassword?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
  carts?: Maybe<CartUpdateManyWithoutUserInput>;
}

export interface CartUpdateManyWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput[] | CartCreateWithoutUserInput>;
  delete?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  set?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  disconnect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  update?: Maybe<
    | CartUpdateWithWhereUniqueWithoutUserInput[]
    | CartUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CartUpsertWithWhereUniqueWithoutUserInput[]
    | CartUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  updateMany?: Maybe<
    CartUpdateManyWithWhereNestedInput[] | CartUpdateManyWithWhereNestedInput
  >;
}

export interface CartUpdateWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput;
  data: CartUpdateWithoutUserDataInput;
}

export interface CartUpdateWithoutUserDataInput {
  sessionId?: Maybe<String>;
  items?: Maybe<CartItemUpdateManyWithoutCartInput>;
}

export interface CartUpsertWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput;
  update: CartUpdateWithoutUserDataInput;
  create: CartCreateWithoutUserInput;
}

export interface CartScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sessionId?: Maybe<String>;
  sessionId_not?: Maybe<String>;
  sessionId_in?: Maybe<String[] | String>;
  sessionId_not_in?: Maybe<String[] | String>;
  sessionId_lt?: Maybe<String>;
  sessionId_lte?: Maybe<String>;
  sessionId_gt?: Maybe<String>;
  sessionId_gte?: Maybe<String>;
  sessionId_contains?: Maybe<String>;
  sessionId_not_contains?: Maybe<String>;
  sessionId_starts_with?: Maybe<String>;
  sessionId_not_starts_with?: Maybe<String>;
  sessionId_ends_with?: Maybe<String>;
  sessionId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  OR?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  NOT?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
}

export interface CartUpdateManyWithWhereNestedInput {
  where: CartScalarWhereInput;
  data: CartUpdateManyDataInput;
}

export interface CartUpdateManyDataInput {
  sessionId?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface OrderItemUpdateManyWithoutOrderInput {
  create?: Maybe<
    OrderItemCreateWithoutOrderInput[] | OrderItemCreateWithoutOrderInput
  >;
  deleteMany?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  updateMany?: Maybe<
    | OrderItemUpdateManyWithWhereNestedInput[]
    | OrderItemUpdateManyWithWhereNestedInput
  >;
}

export interface OrderItemScalarWhereInput {
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  OR?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  NOT?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
}

export interface OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput;
  data: OrderItemUpdateManyDataInput;
}

export interface OrderItemUpdateManyDataInput {
  quantity?: Maybe<Int>;
}

export interface OrderUpdateManyMutationInput {
  stripeCharge?: Maybe<Json>;
  amount?: Maybe<Int>;
  currentLat?: Maybe<Float>;
  currentLon?: Maybe<Float>;
  destinationLat?: Maybe<Float>;
  destinationLon?: Maybe<Float>;
  verifiedAt?: Maybe<DateTimeInput>;
  capturedAt?: Maybe<DateTimeInput>;
  cookedAt?: Maybe<DateTimeInput>;
  deliveredAt?: Maybe<DateTimeInput>;
  failedAt?: Maybe<DateTimeInput>;
  error?: Maybe<Json>;
}

export interface OrderItemCreateInput {
  order: OrderCreateOneWithoutItemsInput;
  item: ItemCreateOneInput;
  quantity: Int;
}

export interface OrderCreateOneWithoutItemsInput {
  create?: Maybe<OrderCreateWithoutItemsInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutItemsInput {
  user: UserCreateOneInput;
  stripeCharge: Json;
  amount: Int;
  currentLat?: Maybe<Float>;
  currentLon?: Maybe<Float>;
  destinationLat: Float;
  destinationLon: Float;
  verifiedAt?: Maybe<DateTimeInput>;
  capturedAt?: Maybe<DateTimeInput>;
  cookedAt?: Maybe<DateTimeInput>;
  deliveredAt?: Maybe<DateTimeInput>;
  failedAt?: Maybe<DateTimeInput>;
  error?: Maybe<Json>;
}

export interface OrderItemUpdateManyMutationInput {
  quantity?: Maybe<Int>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  hashPassword?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
  carts?: Maybe<CartUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  hashPassword?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartWhereInput>;
  AND?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  OR?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  NOT?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
}

export interface CartItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartItemWhereInput>;
  AND?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
  OR?: Maybe<CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput>;
  NOT?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface OrderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderItemWhereInput>;
  AND?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Cart {
  id: ID_Output;
  sessionId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  sessionId: () => Promise<String>;
  user: <T = UserPromise>() => T;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sessionId: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  items: <T = Promise<AsyncIterator<CartItemSubscription>>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CartNullablePromise
  extends Promise<Cart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sessionId: () => Promise<String>;
  user: <T = UserPromise>() => T;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email: String;
  hashPassword: String;
  name: String;
  points: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  hashPassword: () => Promise<String>;
  name: () => Promise<String>;
  points: () => Promise<Int>;
  carts: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  hashPassword: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
  carts: <T = Promise<AsyncIterator<CartSubscription>>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  hashPassword: () => Promise<String>;
  name: () => Promise<String>;
  points: () => Promise<Int>;
  carts: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartItem {
  quantity: Int;
}

export interface CartItemPromise extends Promise<CartItem>, Fragmentable {
  cart: <T = CartPromise>() => T;
  item: <T = ItemPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface CartItemSubscription
  extends Promise<AsyncIterator<CartItem>>,
    Fragmentable {
  cart: <T = CartSubscription>() => T;
  item: <T = ItemSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemNullablePromise
  extends Promise<CartItem | null>,
    Fragmentable {
  cart: <T = CartPromise>() => T;
  item: <T = ItemPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface Item {
  id: ID_Output;
  name: String;
  amount: Int;
  category: String;
  description?: String;
  imageUrl?: String;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Int>;
  category: () => Promise<String>;
  description: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Int>;
  category: () => Promise<String>;
  description: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface CartConnection {
  pageInfo: PageInfo;
  edges: CartEdge[];
}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CartEdge {
  node: Cart;
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemConnection {
  pageInfo: PageInfo;
  edges: CartItemEdge[];
}

export interface CartItemConnectionPromise
  extends Promise<CartItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartItemEdge>>() => T;
  aggregate: <T = AggregateCartItemPromise>() => T;
}

export interface CartItemConnectionSubscription
  extends Promise<AsyncIterator<CartItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartItemSubscription>() => T;
}

export interface CartItemEdge {
  node: CartItem;
  cursor: String;
}

export interface CartItemEdgePromise
  extends Promise<CartItemEdge>,
    Fragmentable {
  node: <T = CartItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartItemEdgeSubscription
  extends Promise<AsyncIterator<CartItemEdge>>,
    Fragmentable {
  node: <T = CartItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCartItem {
  count: Int;
}

export interface AggregateCartItemPromise
  extends Promise<AggregateCartItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartItemSubscription
  extends Promise<AsyncIterator<AggregateCartItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Order {
  id: ID_Output;
  stripeCharge: Json;
  amount: Int;
  currentLat?: Float;
  currentLon?: Float;
  destinationLat: Float;
  destinationLon: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  verifiedAt?: DateTimeOutput;
  capturedAt?: DateTimeOutput;
  cookedAt?: DateTimeOutput;
  deliveredAt?: DateTimeOutput;
  failedAt?: DateTimeOutput;
  error?: Json;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  stripeCharge: () => Promise<Json>;
  amount: () => Promise<Int>;
  currentLat: () => Promise<Float>;
  currentLon: () => Promise<Float>;
  destinationLat: () => Promise<Float>;
  destinationLon: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  verifiedAt: () => Promise<DateTimeOutput>;
  capturedAt: () => Promise<DateTimeOutput>;
  cookedAt: () => Promise<DateTimeOutput>;
  deliveredAt: () => Promise<DateTimeOutput>;
  failedAt: () => Promise<DateTimeOutput>;
  error: () => Promise<Json>;
  items: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  stripeCharge: () => Promise<AsyncIterator<Json>>;
  amount: () => Promise<AsyncIterator<Int>>;
  currentLat: () => Promise<AsyncIterator<Float>>;
  currentLon: () => Promise<AsyncIterator<Float>>;
  destinationLat: () => Promise<AsyncIterator<Float>>;
  destinationLon: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  verifiedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  capturedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cookedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deliveredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  failedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Json>>;
  items: <T = Promise<AsyncIterator<OrderItemSubscription>>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  stripeCharge: () => Promise<Json>;
  amount: () => Promise<Int>;
  currentLat: () => Promise<Float>;
  currentLon: () => Promise<Float>;
  destinationLat: () => Promise<Float>;
  destinationLon: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  verifiedAt: () => Promise<DateTimeOutput>;
  capturedAt: () => Promise<DateTimeOutput>;
  cookedAt: () => Promise<DateTimeOutput>;
  deliveredAt: () => Promise<DateTimeOutput>;
  failedAt: () => Promise<DateTimeOutput>;
  error: () => Promise<Json>;
  items: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrderItem {
  quantity: Int;
}

export interface OrderItemPromise extends Promise<OrderItem>, Fragmentable {
  order: <T = OrderPromise>() => T;
  item: <T = ItemPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface OrderItemSubscription
  extends Promise<AsyncIterator<OrderItem>>,
    Fragmentable {
  order: <T = OrderSubscription>() => T;
  item: <T = ItemSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemNullablePromise
  extends Promise<OrderItem | null>,
    Fragmentable {
  order: <T = OrderPromise>() => T;
  item: <T = ItemPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemConnection {
  pageInfo: PageInfo;
  edges: OrderItemEdge[];
}

export interface OrderItemConnectionPromise
  extends Promise<OrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderItemEdge>>() => T;
  aggregate: <T = AggregateOrderItemPromise>() => T;
}

export interface OrderItemConnectionSubscription
  extends Promise<AsyncIterator<OrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderItemSubscription>() => T;
}

export interface OrderItemEdge {
  node: OrderItem;
  cursor: String;
}

export interface OrderItemEdgePromise
  extends Promise<OrderItemEdge>,
    Fragmentable {
  node: <T = OrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderItemEdgeSubscription
  extends Promise<AsyncIterator<OrderItemEdge>>,
    Fragmentable {
  node: <T = OrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderItem {
  count: Int;
}

export interface AggregateOrderItemPromise
  extends Promise<AggregateOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderItemSubscription
  extends Promise<AsyncIterator<AggregateOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  node: Cart;
  updatedFields: String[];
  previousValues: CartPreviousValues;
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface CartPreviousValues {
  id: ID_Output;
  sessionId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sessionId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sessionId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CartItemSubscriptionPayload {
  mutation: MutationType;
  node: CartItem;
  updatedFields: String[];
  previousValues: CartItemPreviousValues;
}

export interface CartItemSubscriptionPayloadPromise
  extends Promise<CartItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartItemPreviousValuesPromise>() => T;
}

export interface CartItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartItemPreviousValuesSubscription>() => T;
}

export interface CartItemPreviousValues {
  quantity: Int;
}

export interface CartItemPreviousValuesPromise
  extends Promise<CartItemPreviousValues>,
    Fragmentable {
  quantity: () => Promise<Int>;
}

export interface CartItemPreviousValuesSubscription
  extends Promise<AsyncIterator<CartItemPreviousValues>>,
    Fragmentable {
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  name: String;
  amount: Int;
  category: String;
  description?: String;
  imageUrl?: String;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Int>;
  category: () => Promise<String>;
  description: () => Promise<String>;
  imageUrl: () => Promise<String>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  stripeCharge: Json;
  amount: Int;
  currentLat?: Float;
  currentLon?: Float;
  destinationLat: Float;
  destinationLon: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  verifiedAt?: DateTimeOutput;
  capturedAt?: DateTimeOutput;
  cookedAt?: DateTimeOutput;
  deliveredAt?: DateTimeOutput;
  failedAt?: DateTimeOutput;
  error?: Json;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stripeCharge: () => Promise<Json>;
  amount: () => Promise<Int>;
  currentLat: () => Promise<Float>;
  currentLon: () => Promise<Float>;
  destinationLat: () => Promise<Float>;
  destinationLon: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  verifiedAt: () => Promise<DateTimeOutput>;
  capturedAt: () => Promise<DateTimeOutput>;
  cookedAt: () => Promise<DateTimeOutput>;
  deliveredAt: () => Promise<DateTimeOutput>;
  failedAt: () => Promise<DateTimeOutput>;
  error: () => Promise<Json>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stripeCharge: () => Promise<AsyncIterator<Json>>;
  amount: () => Promise<AsyncIterator<Int>>;
  currentLat: () => Promise<AsyncIterator<Float>>;
  currentLon: () => Promise<AsyncIterator<Float>>;
  destinationLat: () => Promise<AsyncIterator<Float>>;
  destinationLon: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  verifiedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  capturedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  cookedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deliveredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  failedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Json>>;
}

export interface OrderItemSubscriptionPayload {
  mutation: MutationType;
  node: OrderItem;
  updatedFields: String[];
  previousValues: OrderItemPreviousValues;
}

export interface OrderItemSubscriptionPayloadPromise
  extends Promise<OrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderItemPreviousValuesPromise>() => T;
}

export interface OrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderItemPreviousValuesSubscription>() => T;
}

export interface OrderItemPreviousValues {
  quantity: Int;
}

export interface OrderItemPreviousValuesPromise
  extends Promise<OrderItemPreviousValues>,
    Fragmentable {
  quantity: () => Promise<Int>;
}

export interface OrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderItemPreviousValues>>,
    Fragmentable {
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  hashPassword: String;
  name: String;
  points: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  hashPassword: () => Promise<String>;
  name: () => Promise<String>;
  points: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  hashPassword: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Json = any;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "CartItem",
    embedded: false
  },
  {
    name: "OrderItem",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/public-woolrider-256/great-bear-prisma/dev`
});
export const prisma = new Prisma();
