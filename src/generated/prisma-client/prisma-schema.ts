// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCart {
  count: Int!
}

type AggregateCartItem {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Cart {
  id: ID!
  sessionId: String!
  user: User!
  items(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CartConnection {
  pageInfo: PageInfo!
  edges: [CartEdge]!
  aggregate: AggregateCart!
}

input CartCreateInput {
  sessionId: String!
  user: UserCreateOneWithoutCartsInput!
  items: CartItemCreateManyWithoutCartInput
}

input CartCreateManyWithoutUserInput {
  create: [CartCreateWithoutUserInput!]
  connect: [CartWhereUniqueInput!]
}

input CartCreateOneWithoutItemsInput {
  create: CartCreateWithoutItemsInput
  connect: CartWhereUniqueInput
}

input CartCreateWithoutItemsInput {
  sessionId: String!
  user: UserCreateOneWithoutCartsInput!
}

input CartCreateWithoutUserInput {
  sessionId: String!
  items: CartItemCreateManyWithoutCartInput
}

type CartEdge {
  node: Cart!
  cursor: String!
}

type CartItem {
  cart: Cart!
  item: Item!
  quantity: Int!
}

type CartItemConnection {
  pageInfo: PageInfo!
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  cart: CartCreateOneWithoutItemsInput!
  item: ItemCreateOneInput!
  quantity: Int!
}

input CartItemCreateManyWithoutCartInput {
  create: [CartItemCreateWithoutCartInput!]
}

input CartItemCreateWithoutCartInput {
  item: ItemCreateOneInput!
  quantity: Int!
}

type CartItemEdge {
  node: CartItem!
  cursor: String!
}

enum CartItemOrderByInput {
  quantity_ASC
  quantity_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CartItemPreviousValues {
  quantity: Int!
}

input CartItemScalarWhereInput {
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [CartItemScalarWhereInput!]
  OR: [CartItemScalarWhereInput!]
  NOT: [CartItemScalarWhereInput!]
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
  AND: [CartItemSubscriptionWhereInput!]
  OR: [CartItemSubscriptionWhereInput!]
  NOT: [CartItemSubscriptionWhereInput!]
}

input CartItemUpdateManyDataInput {
  quantity: Int
}

input CartItemUpdateManyMutationInput {
  quantity: Int
}

input CartItemUpdateManyWithoutCartInput {
  create: [CartItemCreateWithoutCartInput!]
  deleteMany: [CartItemScalarWhereInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput!
  data: CartItemUpdateManyDataInput!
}

input CartItemWhereInput {
  cart: CartWhereInput
  item: ItemWhereInput
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
}

enum CartOrderByInput {
  id_ASC
  id_DESC
  sessionId_ASC
  sessionId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CartPreviousValues {
  id: ID!
  sessionId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CartScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sessionId: String
  sessionId_not: String
  sessionId_in: [String!]
  sessionId_not_in: [String!]
  sessionId_lt: String
  sessionId_lte: String
  sessionId_gt: String
  sessionId_gte: String
  sessionId_contains: String
  sessionId_not_contains: String
  sessionId_starts_with: String
  sessionId_not_starts_with: String
  sessionId_ends_with: String
  sessionId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  NOT: [CartScalarWhereInput!]
}

type CartSubscriptionPayload {
  mutation: MutationType!
  node: Cart
  updatedFields: [String!]
  previousValues: CartPreviousValues
}

input CartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartWhereInput
  AND: [CartSubscriptionWhereInput!]
  OR: [CartSubscriptionWhereInput!]
  NOT: [CartSubscriptionWhereInput!]
}

input CartUpdateInput {
  sessionId: String
  user: UserUpdateOneRequiredWithoutCartsInput
  items: CartItemUpdateManyWithoutCartInput
}

input CartUpdateManyDataInput {
  sessionId: String
}

input CartUpdateManyMutationInput {
  sessionId: String
}

input CartUpdateManyWithoutUserInput {
  create: [CartCreateWithoutUserInput!]
  delete: [CartWhereUniqueInput!]
  connect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CartScalarWhereInput!]
  updateMany: [CartUpdateManyWithWhereNestedInput!]
}

input CartUpdateManyWithWhereNestedInput {
  where: CartScalarWhereInput!
  data: CartUpdateManyDataInput!
}

input CartUpdateWithoutUserDataInput {
  sessionId: String
  items: CartItemUpdateManyWithoutCartInput
}

input CartUpdateWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutUserDataInput!
}

input CartUpsertWithWhereUniqueWithoutUserInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutUserDataInput!
  create: CartCreateWithoutUserInput!
}

input CartWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sessionId: String
  sessionId_not: String
  sessionId_in: [String!]
  sessionId_not_in: [String!]
  sessionId_lt: String
  sessionId_lte: String
  sessionId_gt: String
  sessionId_gte: String
  sessionId_contains: String
  sessionId_not_contains: String
  sessionId_starts_with: String
  sessionId_not_starts_with: String
  sessionId_ends_with: String
  sessionId_not_ends_with: String
  user: UserWhereInput
  items_every: CartItemWhereInput
  items_some: CartItemWhereInput
  items_none: CartItemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
}

input CartWhereUniqueInput {
  id: ID
  sessionId: String
}

scalar DateTime

type Item {
  id: ID!
  name: String!
  amount: Int!
  category: String!
  description: String
  imageUrl: String
}

type ItemConnection {
  pageInfo: PageInfo!
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  name: String!
  amount: Int!
  category: String!
  description: String
  imageUrl: String
}

input ItemCreateOneInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
}

type ItemEdge {
  node: Item!
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
  category_ASC
  category_DESC
  description_ASC
  description_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ItemPreviousValues {
  id: ID!
  name: String!
  amount: Int!
  category: String!
  description: String
  imageUrl: String
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
  AND: [ItemSubscriptionWhereInput!]
  OR: [ItemSubscriptionWhereInput!]
  NOT: [ItemSubscriptionWhereInput!]
}

input ItemUpdateInput {
  name: String
  amount: Int
  category: String
  description: String
  imageUrl: String
}

input ItemUpdateManyMutationInput {
  name: String
  amount: Int
  category: String
  description: String
  imageUrl: String
}

input ItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
}

input ItemWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Mutation {
  createCart(data: CartCreateInput!): Cart!
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  updateManyCarts(data: CartUpdateManyMutationInput!, where: CartWhereInput): BatchPayload!
  upsertCart(where: CartWhereUniqueInput!, create: CartCreateInput!, update: CartUpdateInput!): Cart!
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteManyCarts(where: CartWhereInput): BatchPayload!
  createCartItem(data: CartItemCreateInput!): CartItem!
  updateManyCartItems(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  createItem(data: ItemCreateInput!): Item!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  user: User!
  stripeCharge: Json!
  amount: Int!
  currentLat: Float
  currentLon: Float
  destinationLat: Float!
  destinationLon: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  verifiedAt: DateTime
  capturedAt: DateTime
  cookedAt: DateTime
  deliveredAt: DateTime
  failedAt: DateTime
  error: Json
  items(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  user: UserCreateOneInput!
  stripeCharge: Json!
  amount: Int!
  currentLat: Float
  currentLon: Float
  destinationLat: Float!
  destinationLon: Float!
  verifiedAt: DateTime
  capturedAt: DateTime
  cookedAt: DateTime
  deliveredAt: DateTime
  failedAt: DateTime
  error: Json
  items: OrderItemCreateManyWithoutOrderInput
}

input OrderCreateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutItemsInput {
  user: UserCreateOneInput!
  stripeCharge: Json!
  amount: Int!
  currentLat: Float
  currentLon: Float
  destinationLat: Float!
  destinationLon: Float!
  verifiedAt: DateTime
  capturedAt: DateTime
  cookedAt: DateTime
  deliveredAt: DateTime
  failedAt: DateTime
  error: Json
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type OrderItem {
  order: Order!
  item: Item!
  quantity: Int!
}

type OrderItemConnection {
  pageInfo: PageInfo!
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  order: OrderCreateOneWithoutItemsInput!
  item: ItemCreateOneInput!
  quantity: Int!
}

input OrderItemCreateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
}

input OrderItemCreateWithoutOrderInput {
  item: ItemCreateOneInput!
  quantity: Int!
}

type OrderItemEdge {
  node: OrderItem!
  cursor: String!
}

enum OrderItemOrderByInput {
  quantity_ASC
  quantity_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderItemPreviousValues {
  quantity: Int!
}

input OrderItemScalarWhereInput {
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
  NOT: [OrderItemScalarWhereInput!]
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
  AND: [OrderItemSubscriptionWhereInput!]
  OR: [OrderItemSubscriptionWhereInput!]
  NOT: [OrderItemSubscriptionWhereInput!]
}

input OrderItemUpdateManyDataInput {
  quantity: Int
}

input OrderItemUpdateManyMutationInput {
  quantity: Int
}

input OrderItemUpdateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
}

input OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput!
  data: OrderItemUpdateManyDataInput!
}

input OrderItemWhereInput {
  order: OrderWhereInput
  item: ItemWhereInput
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  stripeCharge_ASC
  stripeCharge_DESC
  amount_ASC
  amount_DESC
  currentLat_ASC
  currentLat_DESC
  currentLon_ASC
  currentLon_DESC
  destinationLat_ASC
  destinationLat_DESC
  destinationLon_ASC
  destinationLon_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  verifiedAt_ASC
  verifiedAt_DESC
  capturedAt_ASC
  capturedAt_DESC
  cookedAt_ASC
  cookedAt_DESC
  deliveredAt_ASC
  deliveredAt_DESC
  failedAt_ASC
  failedAt_DESC
  error_ASC
  error_DESC
}

type OrderPreviousValues {
  id: ID!
  stripeCharge: Json!
  amount: Int!
  currentLat: Float
  currentLon: Float
  destinationLat: Float!
  destinationLon: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  verifiedAt: DateTime
  capturedAt: DateTime
  cookedAt: DateTime
  deliveredAt: DateTime
  failedAt: DateTime
  error: Json
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  user: UserUpdateOneRequiredInput
  stripeCharge: Json
  amount: Int
  currentLat: Float
  currentLon: Float
  destinationLat: Float
  destinationLon: Float
  verifiedAt: DateTime
  capturedAt: DateTime
  cookedAt: DateTime
  deliveredAt: DateTime
  failedAt: DateTime
  error: Json
  items: OrderItemUpdateManyWithoutOrderInput
}

input OrderUpdateManyMutationInput {
  stripeCharge: Json
  amount: Int
  currentLat: Float
  currentLon: Float
  destinationLat: Float
  destinationLon: Float
  verifiedAt: DateTime
  capturedAt: DateTime
  cookedAt: DateTime
  deliveredAt: DateTime
  failedAt: DateTime
  error: Json
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  currentLat: Float
  currentLat_not: Float
  currentLat_in: [Float!]
  currentLat_not_in: [Float!]
  currentLat_lt: Float
  currentLat_lte: Float
  currentLat_gt: Float
  currentLat_gte: Float
  currentLon: Float
  currentLon_not: Float
  currentLon_in: [Float!]
  currentLon_not_in: [Float!]
  currentLon_lt: Float
  currentLon_lte: Float
  currentLon_gt: Float
  currentLon_gte: Float
  destinationLat: Float
  destinationLat_not: Float
  destinationLat_in: [Float!]
  destinationLat_not_in: [Float!]
  destinationLat_lt: Float
  destinationLat_lte: Float
  destinationLat_gt: Float
  destinationLat_gte: Float
  destinationLon: Float
  destinationLon_not: Float
  destinationLon_in: [Float!]
  destinationLon_not_in: [Float!]
  destinationLon_lt: Float
  destinationLon_lte: Float
  destinationLon_gt: Float
  destinationLon_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  verifiedAt: DateTime
  verifiedAt_not: DateTime
  verifiedAt_in: [DateTime!]
  verifiedAt_not_in: [DateTime!]
  verifiedAt_lt: DateTime
  verifiedAt_lte: DateTime
  verifiedAt_gt: DateTime
  verifiedAt_gte: DateTime
  capturedAt: DateTime
  capturedAt_not: DateTime
  capturedAt_in: [DateTime!]
  capturedAt_not_in: [DateTime!]
  capturedAt_lt: DateTime
  capturedAt_lte: DateTime
  capturedAt_gt: DateTime
  capturedAt_gte: DateTime
  cookedAt: DateTime
  cookedAt_not: DateTime
  cookedAt_in: [DateTime!]
  cookedAt_not_in: [DateTime!]
  cookedAt_lt: DateTime
  cookedAt_lte: DateTime
  cookedAt_gt: DateTime
  cookedAt_gte: DateTime
  deliveredAt: DateTime
  deliveredAt_not: DateTime
  deliveredAt_in: [DateTime!]
  deliveredAt_not_in: [DateTime!]
  deliveredAt_lt: DateTime
  deliveredAt_lte: DateTime
  deliveredAt_gt: DateTime
  deliveredAt_gte: DateTime
  failedAt: DateTime
  failedAt_not: DateTime
  failedAt_in: [DateTime!]
  failedAt_not_in: [DateTime!]
  failedAt_lt: DateTime
  failedAt_lte: DateTime
  failedAt_gt: DateTime
  failedAt_gte: DateTime
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  cart(where: CartWhereUniqueInput!): Cart
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart]!
  cartsConnection(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartConnection!
  cartItems(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem]!
  cartItemsConnection(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartItemConnection!
  item(where: ItemWhereUniqueInput!): Item
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem]!
  orderItemsConnection(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  cart(where: CartSubscriptionWhereInput): CartSubscriptionPayload
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderItem(where: OrderItemSubscriptionWhereInput): OrderItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  hashPassword: String!
  name: String!
  points: Int!
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  hashPassword: String!
  name: String!
  points: Int
  carts: CartCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartsInput {
  create: UserCreateWithoutCartsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCartsInput {
  email: String!
  hashPassword: String!
  name: String!
  points: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  hashPassword_ASC
  hashPassword_DESC
  name_ASC
  name_DESC
  points_ASC
  points_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  hashPassword: String!
  name: String!
  points: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  hashPassword: String
  name: String
  points: Int
  carts: CartUpdateManyWithoutUserInput
}

input UserUpdateInput {
  email: String
  hashPassword: String
  name: String
  points: Int
  carts: CartUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  hashPassword: String
  name: String
  points: Int
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCartsInput {
  create: UserCreateWithoutCartsInput
  update: UserUpdateWithoutCartsDataInput
  upsert: UserUpsertWithoutCartsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCartsDataInput {
  email: String
  hashPassword: String
  name: String
  points: Int
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCartsInput {
  update: UserUpdateWithoutCartsDataInput!
  create: UserCreateWithoutCartsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  hashPassword: String
  hashPassword_not: String
  hashPassword_in: [String!]
  hashPassword_not_in: [String!]
  hashPassword_lt: String
  hashPassword_lte: String
  hashPassword_gt: String
  hashPassword_gte: String
  hashPassword_contains: String
  hashPassword_not_contains: String
  hashPassword_starts_with: String
  hashPassword_not_starts_with: String
  hashPassword_ends_with: String
  hashPassword_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  points: Int
  points_not: Int
  points_in: [Int!]
  points_not_in: [Int!]
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  carts_every: CartWhereInput
  carts_some: CartWhereInput
  carts_none: CartWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`